This module tests the matrix_divided function.

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

You must supply two arguments
>>> matrix_divided(2)
Traceback (most recent call last):
	...
TypeError: matrix_divided() missing 1 required positional argument: 'div'

All elements of the matrix should be of the same size
>>> matrix = [[1, 2, 3], [3, 4]]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
	...
TypeError: Each row of the matrix must have the same size

matrix should not be empty
>>> matrix = [[]]
>>> matrix_divided(matrix, 2)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers / floats

matrix should be a list of only integers or floats
>>> matrix = [['1', 2, 3.4], [1, 2.0, 3]]
>>> matrix_divided(matrix, 3)
Traceback (most recent call last):
	...
TypeError: matrix must be a matrix (list of lists) of integers / floats

Div should also be an integer or float and larger than 0
>>> matrix = [[1, 2], [3.1, 4.2]]
>>> matrix_divided(matrix, '3')
Traceback (most recent call last):
	...
TypeError: div must be a number

>>> matrix = [[1, 2], [3, 4]]
>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
	...
ZeroDivisionError: division by zero

If all conditions are met--the list contains integers
and floats, and div is a float or integer--the function returns
a list of the original list elements with each element divided by div, 
and the result rounded to two decimal places
>>> matrix = [[2, 4],[6, 8]]
>>> matrix_divided(matrix, 2)
[[1.0, 2.0], [3.0, 4.0]]

>>> matrix = [[6.88, 4.22], [8.66, 4.98]]
>>> matrix_divided(matrix, 2.0)
[[3.44, 2.11], [4.33, 2.49]]

